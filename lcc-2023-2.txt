PROGRAM → STATEMENT | FUNCLIST | \epsilon


FUNCLIST → FUNCDEF FUNCLIST | FUNCDEF


FUNCDEF → def ident (PARAMLIST) {STATELIST}


PARAMLIST → \epsilon | int ident, PARAMLIST | float ident, PARAMLIST | string ident, PARAMLIST | int ident | float ident | string ident


STATEMENT → VARDECL; | ATRIBSTAT; | PRINTSTAT; | READSTAT; | RETURNSTAT; | IFSTAT | FORSTAT | {STATELIST} | break ; | ;


VARDECL → int ident E` | float ident  E` | string ident E` 
E` → [int constant] E` | \epsilon 
 
ATRIBSTAT → LVALUE = EXPRESSION | LVALUE = ALLOCEXPRESSION | LVALUE = FUNCCALL


FUNCCALL → ident(PARAMLISTCALL)


PARAMLIST_CALL → ident, PARAMLIST_CALL | ident | \epsilon


PRINTSTAT → print EXPRESSION


READSTAT → read LVALUE


RETURNSTAT → return


IFSTAT → if( EXPRESSION ) STATEMENT else STATEMENT |
 if( EXPRESSION ) STATEMENT


FORSTAT → for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT


STATELIST → STATEMENT STATELIST | STATEMENT


ALLOCEXPRESSION → new int [ NUMEXPRESSION ] D’ | new float [ NUMEXPRESSION ] D’ | new string [ NUMEXPRESSION ] D’
D’ →  \epsilon | [ NUMEXPRESSION ] D’


EXPRESSION → NUMEXPRESSION | NUMEXPRESSION < NUMEXPRESSION | NUMEXPRESSION > NUMEXPRESSION | NUMEXPRESSION <= NUMEXPRESSION | NUMEXPRESSION >= NUMEXPRESSION | NUMEXPRESSION == NUMEXPRESSION | NUMEXPRESSION != NUMEXPRESSION


NUMEXPRESSION → TERM A'
A' → \epsilon | + TERM A' | - TERM A' 


TERM → UNARYEXPR C’
C’ →  \epsilon | ∗ UNARYEXPR C’ | / UNARYEXP C’ | % UNARYEXP C’


UNARYEXPR → + FACTOR | - FACTOR | FACTOR


FACTOR → int_constant | float_constant | string_constant | null | LVALUE | (NUMEXPRESSION)


LVALUE → ident B’ 
B’ → \epsilon | [NUMEXPRESSION] B’